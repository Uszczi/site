{"version":3,"sources":["components/Footer.js","components/Header.js","projects/dino/scripts/nn.js","projects/dino/scripts/sketch.js","projects/dino/App.js","components/Main.js","App.js","serviceWorker.js","index.js"],"names":["Footer","className","Header","NeuralNetwork","a","b","c","d","p","this","tf","model","input_nodes","hidden_nodes","output_nodes","createModel","modelCopy","weights","getWeights","weightCopies","i","length","clone","setWeights","rate","mutatedWeights","tensor","shape","values","dataSync","slice","j","Math","random","w","randomGaussian","newTensor","dispose","inputs","xs","predict","hidden","dense","units","inputShape","activation","add","output","sketch","slider","Bush","x","amount","size","width","widthBush","height","fill","rect","gameSpeed","dinoX","dino_bottom","Dino","brain","position_X","position_Y","bottom_Y","gravity","velocity","lift","score","fitness","copy","show","isGrounded","mutate","mutationRate","bush","closest","closestD","Infinity","jump_low","first","sizeOfBush","smallOrHigh","frameCounter","dinos","deadDinos","generation","nextGeneration","calculateFitness","pickOne","index","r","dino","child","setup","createCanvas","text1","createP","createSlider","parent","push","sum","spawnBarrier","ss","qwe","bushUpdate","update","colision","splice","destroyBush","behindScene","draw","value","background","line","think","textSize","liveshow","text","App","React","Component","Main","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.15a29b4e.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Footer() {\r\n  return <div className=\"Footer\">Footer</div>;\r\n}\r\n\r\nexport default Footer;\r\n","import React from \"react\";\r\n\r\nfunction Header() {\r\n  return <div className=\"Header\">Header</div>;\r\n}\r\n\r\nexport default Header;\r\n","import * as tf from \"@tensorflow/tfjs\";\r\n\r\nclass NeuralNetwork {\r\n  constructor(a, b, c, d, p) {\r\n    this.p = p;\r\n    if (a instanceof tf.Sequential) {\r\n      this.model = a;\r\n      this.input_nodes = b;\r\n      this.hidden_nodes = c;\r\n      this.output_nodes = d;\r\n    } else {\r\n      this.input_nodes = a;\r\n      this.hidden_nodes = b;\r\n      this.output_nodes = c;\r\n      this.model = this.createModel();\r\n    }\r\n  }\r\n\r\n  copy(p) {\r\n    return tf.tidy(() => {\r\n      const modelCopy = this.createModel();\r\n      const weights = this.model.getWeights();\r\n      const weightCopies = [];\r\n      for (let i = 0; i < weights.length; i++) {\r\n        weightCopies[i] = weights[i].clone();\r\n      }\r\n      modelCopy.setWeights(weightCopies);\r\n      return new NeuralNetwork(\r\n        modelCopy,\r\n        this.input_nodes,\r\n        this.hidden_nodes,\r\n        this.output_nodes,\r\n        p\r\n      );\r\n    });\r\n  }\r\n\r\n  mutate(rate) {\r\n    tf.tidy(() => {\r\n      const weights = this.model.getWeights();\r\n      const mutatedWeights = [];\r\n      for (let i = 0; i < weights.length; i++) {\r\n        let tensor = weights[i];\r\n        let shape = weights[i].shape;\r\n        let values = tensor.dataSync().slice();\r\n        for (let j = 0; j < values.length; j++) {\r\n          if (Math.random(1) < rate) {\r\n            let w = values[j];\r\n            values[j] = w + this.p.randomGaussian();\r\n          }\r\n        }\r\n        let newTensor = tf.tensor(values, shape);\r\n        mutatedWeights[i] = newTensor;\r\n      }\r\n      this.model.setWeights(mutatedWeights);\r\n    });\r\n  }\r\n\r\n  dispose() {\r\n    this.model.dispose();\r\n  }\r\n\r\n  predict(inputs) {\r\n    return tf.tidy(() => {\r\n      const xs = tf.tensor2d([inputs]);\r\n      const ys = this.model.predict(xs);\r\n      const outputs = ys.dataSync();\r\n      // console.log(outputs);\r\n      return outputs;\r\n    });\r\n  }\r\n\r\n  createModel() {\r\n    const model = tf.sequential();\r\n    const hidden = tf.layers.dense({\r\n      units: this.hidden_nodes,\r\n      inputShape: [this.input_nodes],\r\n      activation: \"sigmoid\",\r\n    });\r\n    model.add(hidden);\r\n    const output = tf.layers.dense({\r\n      units: this.output_nodes,\r\n      activation: \"softmax\",\r\n    });\r\n    model.add(output);\r\n    return model;\r\n  }\r\n}\r\n\r\nexport default NeuralNetwork;\r\n","// import Bush from \"./Bush\";\r\n// import Dino from \"./Dino\";\r\n// import { nextGeneration } from \"./next\";\r\nimport NeuralNetwork from \"./nn\";\r\nimport * as tf from \"@tensorflow/tfjs\";\r\n\r\nexport default function sketch(p) {\r\n  class Bush {\r\n    constructor(x, amount, size) {\r\n      this.x = x;\r\n      this.amount = amount;\r\n      this.width = widthBush * amount;\r\n      this.height = size * 20;\r\n    }\r\n\r\n    show() {\r\n      p.fill(0);\r\n      p.rect(this.x, 400 - this.height, this.width, this.height);\r\n    }\r\n\r\n    update() {\r\n      this.x -= gameSpeed;\r\n    }\r\n\r\n    colision(dinoX, dino_bottom) {\r\n      if (dinoX + 20 >= this.x && dinoX <= this.x + this.width) {\r\n        if (dino_bottom >= 400 - this.height) {\r\n          return true;\r\n        }\r\n      }\r\n      return false;\r\n    }\r\n\r\n    behindScene() {\r\n      return this.x < -50;\r\n    }\r\n  }\r\n\r\n  class Dino {\r\n    constructor(brain, p) {\r\n      this.p = p;\r\n      this.position_X = 100;\r\n      this.position_Y = 200;\r\n      this.height = 50;\r\n      this.bottom_Y = this.position_Y - this.height;\r\n\r\n      this.gravity = 0.6;\r\n      this.velocity = 0;\r\n      this.lift = -10;\r\n      //\t\tthis.isDucking = false;\r\n\r\n      this.score = 0;\r\n      this.fitness = 0;\r\n      if (brain) {\r\n        this.brain = brain.copy(p);\r\n      } else {\r\n        this.brain = new NeuralNetwork(4, 4, 2, p);\r\n      }\r\n    }\r\n\r\n    show() {\r\n      this.p.fill(0);\r\n      this.p.rect(\r\n        this.position_X,\r\n        this.bottom_Y - this.height,\r\n        20,\r\n        this.height\r\n      );\r\n    }\r\n\r\n    update() {\r\n      this.score++;\r\n      this.velocity += this.gravity;\r\n\r\n      if (this.velocity > 16) {\r\n        this.velocity = 16;\r\n      }\r\n\r\n      if (this.bottom_Y + this.velocity > 400) {\r\n        this.bottom_Y = 400;\r\n        this.velocity = 0;\r\n      } else {\r\n        this.bottom_Y += this.velocity;\r\n      }\r\n      this.show();\r\n    }\r\n\r\n    dispose() {\r\n      this.brain.dispose();\r\n    }\r\n\r\n    jump_low() {\r\n      if (this.isGrounded()) {\r\n        this.velocity = this.lift;\r\n      }\r\n    }\r\n\r\n    jump_high() {\r\n      if (this.isGrounded()) {\r\n        this.velocity = this.lift * 1.2;\r\n      }\r\n    }\r\n\r\n    isGrounded() {\r\n      return this.bottom_Y === 400;\r\n    }\r\n\r\n    mutate() {\r\n      this.brain.mutate(mutationRate);\r\n    }\r\n\r\n    think(bush) {\r\n      let closest = null;\r\n      let closestD = Infinity;\r\n      for (let i = 0; i < bush.length; i++) {\r\n        let d = bush[i].x - this.position_X;\r\n        //\t\tconsole.log(d);\r\n        if (d < closestD && d > 0) {\r\n          closest = bush[i];\r\n          closestD = d;\r\n        }\r\n      }\r\n\r\n      let inputs = [];\r\n      inputs[0] = closest.x;\r\n      inputs[1] = this.bottom_Y;\r\n      inputs[2] = closest.width;\r\n      inputs[3] = closest.height;\r\n\r\n      let output = this.brain.predict(inputs);\r\n      if (output[0] > output[1]) {\r\n        this.jump_low();\r\n      }\r\n    }\r\n  }\r\n  let run = false;\r\n  let first = true;\r\n\r\n  //Game variable\r\n  let sizeOfBush = [1, 1, 1, 2, 2, 3];\r\n  let smallOrHigh = [1, 1, 1, 1, 1, 1, 1, 1, 2, 2];\r\n  let widthBush = 22;\r\n  let gameSpeed = 6;\r\n  // let gameAdjuster = 0.01;\r\n  // let counter = 0;\r\n  let frameCounter = 0;\r\n  let bush = [];\r\n\r\n  let slider;\r\n\r\n  //Neural variable\r\n  let dinos = [];\r\n  let deadDinos = [];\r\n  let populationSize = 20;\r\n  let mutationRate = 0.1;\r\n  let generation = 1;\r\n  let canvas;\r\n  p.setup = () => {\r\n    canvas = p.createCanvas(1000, 500);\r\n    let text1 = p.createP(\"Speed: \");\r\n    slider = p.createSlider(1, 10, 1);\r\n    slider.parent(text1);\r\n\r\n    tf.setBackend(\"cpu\");\r\n\r\n    for (let i = 0; i < populationSize; i++) {\r\n      dinos.push(new Dino(null, p));\r\n    }\r\n  };\r\n  function nextGeneration() {\r\n    //  console.log('next generation');\r\n    calculateFitness();\r\n    for (let i = 0; i < populationSize; i++) {\r\n      dinos[i] = pickOne();\r\n    }\r\n    for (let i = 0; i < populationSize; i++) {\r\n      deadDinos[i].dispose();\r\n    }\r\n    deadDinos = [];\r\n  }\r\n\r\n  function pickOne() {\r\n    let index = 0;\r\n    let r = p.random(1);\r\n    while (r > 0) {\r\n      r = r - deadDinos[index].fitness;\r\n      index++;\r\n    }\r\n    index--;\r\n    let dino = deadDinos[index];\r\n    let child = new Dino(dino.brain, p);\r\n    child.mutate();\r\n    return child;\r\n  }\r\n\r\n  let calculateFitness = () => {\r\n    let sum = 0;\r\n    for (let dino of deadDinos) {\r\n      sum += dino.score;\r\n    }\r\n    for (let dino of deadDinos) {\r\n      dino.fitness = dino.score / sum;\r\n    }\r\n  };\r\n\r\n  p.draw = () => {\r\n    if (run || first) {\r\n      for (let i = 0; i < slider.value(); i++) {\r\n        p.background(189, 96, 96);\r\n        p.line(0, 400, 1000, 400);\r\n\r\n        spawnBarrier();\r\n        bushUpdate();\r\n        destroyBush();\r\n\r\n        for (let dino of dinos) {\r\n          dino.think(bush);\r\n          dino.update();\r\n        }\r\n\r\n        if (dinos.length === 0) {\r\n          frameCounter = 0;\r\n          nextGeneration();\r\n          generation++;\r\n          bush = [];\r\n        }\r\n      }\r\n      p.textSize(32);\r\n      let liveshow = dinos.length;\r\n      p.text(\"Generation: \" + generation, 500, 30);\r\n      p.text(\"Live: \" + liveshow, 30, 30);\r\n\r\n      first = false;\r\n    }\r\n  };\r\n\r\n  function spawnBarrier() {\r\n    if (frameCounter % 90 === 0) {\r\n      let r = p.random(100, 300);\r\n      let ss = p.random(sizeOfBush);\r\n      let qwe = p.random(smallOrHigh);\r\n      bush.push(new Bush(1000 + r, ss, qwe));\r\n      frameCounter = 0;\r\n    }\r\n    frameCounter++;\r\n  }\r\n\r\n  function bushUpdate() {\r\n    for (let i = 0; i < bush.length; i++) {\r\n      bush[i].update();\r\n      bush[i].show();\r\n      for (let j = 0; j < dinos.length; j++) {\r\n        if (bush[i].colision(dinos[j].position_X, dinos[j].bottom_Y)) {\r\n          deadDinos.push(dinos.splice(j, 1)[0]);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  function destroyBush() {\r\n    for (let i = bush.length - 1; i >= 0; i--) {\r\n      if (bush[i].behindScene()) {\r\n        bush.splice(i, 1);\r\n      }\r\n    }\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport P5Wrapper from \"react-p5-wrapper\";\r\nimport sketch from \"./scripts/sketch\";\r\n\r\nclass App extends React.Component {\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <P5Wrapper sketch={sketch}></P5Wrapper>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport Dino from \"../projects/dino/App\";\r\n\r\nfunction Main() {\r\n  return (\r\n    <div className=\"Main\">\r\n      <Dino />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Main;\r\n","import React from \"react\";\n\nimport Footer from \"./components/Footer\";\nimport Header from \"./components/Header\";\nimport Main from \"./components/Main\";\nimport \"./css/App.css\";\n\nfunction App() {\n  return (\n    <div className=\"MyBody\">\n      <Header />\n      <Main />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./css/index.css\";\nimport \"./css/mycss.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}