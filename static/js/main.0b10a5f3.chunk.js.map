{"version":3,"sources":["components/Footer.js","components/Header.js","projects/dino/scripts/Dino.js","projects/dino/scripts/Barrier.js","projects/dino/scripts/Bush.js","projects/dino/scripts/Bird.js","projects/dino/scripts/sketch.js","projects/dino/scripts/enviroment.js","projects/dino/App.js","projects/p5demo/sketch.js","projects/p5demo/App.js","components/Main.js","App.js","serviceWorker.js","index.js"],"names":["Footer","className","Header","Dino","brain","p","this","position_X","position_Y","height","bottom_Y","gravity","velocity","lift","fill","rect","Barrier","x","bottom_y","width","config","BASIC_WIDTH","BASIC_HEIGHT","GAME_SPEED","Bush","Bird","Player","b","bird","sketch","setup","createCanvas","GAME_WIDTH","GAME_HEIGHT","draw","background","line","drawConstantEnviroment","show","update","App","canvas","noStroke","ellipse","myCustomRedrawAccordingToNewPropsHandler","newProps","color","state","Math","random","randomColor","bind","setState","onClick","Component","Main","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0b10a5f3.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Footer() {\r\n  return <div className=\"Footer\">Footer tmp </div>;\r\n}\r\n\r\nexport default Footer;\r\n","import React from \"react\";\r\n\r\nfunction Header() {\r\n  return <div className=\"Header\">Heddader</div>;\r\n}\r\n\r\nexport default Header;\r\n","import \"./configuration.json\";\r\n\r\nclass Dino {\r\n  constructor(brain, p) {\r\n    this.p = p;\r\n    this.position_X = 100;\r\n    this.position_Y = 200;\r\n    this.height = 50;\r\n    this.bottom_Y = this.position_Y - this.height;\r\n\r\n    this.gravity = 0.6;\r\n    this.velocity = 0;\r\n    this.lift = -10;\r\n    if (brain == \"PLAYER\") {\r\n    } else if (brain) {\r\n    } else {\r\n    }\r\n  }\r\n\r\n  draw() {\r\n    this.p.fill(0);\r\n    this.p.rect(100, 100, 100, 100);\r\n  }\r\n}\r\n\r\nfunction returnDinoPopulation(amount, p) {\r\n  let dinos = [];\r\n  for (let i = 0; i < amount; i++) {\r\n    dinos.push(new Dino(null, p));\r\n  }\r\n  return dinos;\r\n}\r\n\r\nexport { Dino, returnDinoPopulation };\r\n","import config from \"./configuration.json\";\r\nclass Barrier {\r\n  constructor(x, bottom_y, width, height, p) {\r\n    this.x = x;\r\n    this.bottom_y = bottom_y;\r\n    this.width = width * config.BASIC_WIDTH;\r\n    this.height = height * config.BASIC_HEIGHT;\r\n    this.p = p;\r\n  }\r\n\r\n  show() {\r\n    this.p.fill(0);\r\n    this.p.rect(this.x, this.bottom_y, this.width, -this.height);\r\n  }\r\n\r\n  update() {\r\n    this.x -= config.GAME_SPEED;\r\n  }\r\n\r\n  // colision(dinoX, dino_bottom) {\r\n  //   if (dinoX + 20 >= this.x && dinoX <= this.x + this.width) {\r\n  //     if (dino_bottom >= 400 - this.height) {\r\n  //       return true;\r\n  //     }\r\n  //   }\r\n  //   return false;\r\n  // }\r\n\r\n  // behindScene() {\r\n  //   return this.x < -50;\r\n  // }\r\n}\r\n\r\nexport { Barrier };\r\n","import config from \"./configuration.json\";\r\nimport { Barrier } from \"./Barrier\";\r\n\r\nclass Bush extends Barrier {\r\n  constructor(x, bottom_y, width, height, p) {\r\n    super(x, bottom_y, width, height, p);\r\n  }\r\n}\r\n\r\nexport { Bush };\r\n","import { Barrier } from \"./Barrier\";\r\n\r\nclass Bird extends Barrier {\r\n  constructor(x, bottom_y, width, height, p) {\r\n    super(x, bottom_y, width, height, p);\r\n  }\r\n}\r\n\r\nexport { Bird };\r\n","// import * as tf from \"@tensorflow/tfjs\";\r\n\r\nimport { returnDinoPopulation, Dino } from \"./Dino\";\r\nimport { Bush } from \"./Bush\";\r\nimport { Bird } from \"./Bird\";\r\nimport { drawConstantEnviroment } from \"./enviroment\";\r\nimport config from \"./configuration.json\";\r\n\r\nlet population = 10;\r\nlet dinos = [];\r\nlet Player;\r\n\r\nlet b;\r\nlet bird;\r\n\r\nfunction sketch(p) {\r\n  p.setup = () => {\r\n    p.createCanvas(config.GAME_WIDTH, config.GAME_HEIGHT);\r\n    b = new Bush(config.GAME_WIDTH + 40, -(100 - config.GAME_HEIGHT), 3, 4, p);\r\n    bird = new Bird(\r\n      config.GAME_WIDTH + 80,\r\n      -(150 - config.GAME_HEIGHT),\r\n      3,\r\n      4,\r\n      p\r\n    );\r\n    Player = new Dino(\"PLAYER\", p);\r\n  };\r\n  p.draw = () => {\r\n    drawConstantEnviroment(p);\r\n    Player.draw();\r\n    b.show();\r\n    b.update();\r\n    bird.show();\r\n    bird.update();\r\n  };\r\n}\r\n\r\nexport default sketch;\r\n","import config from \"./configuration.json\";\r\n\r\nfunction drawConstantEnviroment(p) {\r\n  p.background(19, 96, 96);\r\n  p.line(\r\n    0,\r\n    -(100 - config.GAME_HEIGHT),\r\n    config.GAME_WIDTH,\r\n    -(100 - config.GAME_HEIGHT)\r\n  );\r\n}\r\n\r\nexport { drawConstantEnviroment };\r\n","import React, { Component } from \"react\";\r\nimport P5Wrapper from \"react-p5-wrapper\";\r\nimport sketch from \"./scripts/sketch\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <P5Wrapper sketch={sketch}></P5Wrapper>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","export default function sketch(p) {\r\n  let canvas;\r\n\r\n  p.setup = () => {\r\n    canvas = p.createCanvas(300, 200);\r\n    p.noStroke();\r\n  };\r\n\r\n  p.draw = () => {\r\n    p.background(\"orangered\");\r\n    p.ellipse(150, 100, 100, 100);\r\n  };\r\n\r\n  p.myCustomRedrawAccordingToNewPropsHandler = (newProps) => {\r\n    if (canvas)\r\n      //Make sure the canvas has been created\r\n      p.fill(newProps.color);\r\n  };\r\n}\r\n\r\n// useless comment\r\n","import React, { Component } from \"react\";\r\nimport P5Wrapper from \"react-p5-wrapper\";\r\nimport sketch from \"./sketch\";\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      color: [Math.random() * 255, Math.random() * 255, Math.random() * 255],\r\n    };\r\n    this.randomColor = this.randomColor.bind(this);\r\n  }\r\n\r\n  randomColor() {\r\n    this.setState({\r\n      color: [Math.random() * 255, Math.random() * 255, Math.random() * 255],\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <button onClick={this.randomColor}>Random Color</button>\r\n        <P5Wrapper sketch={sketch} color={this.state.color}></P5Wrapper>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport Dino from \"../projects/dino/App\";\r\nimport Demo from \"../projects/p5demo/App\";\r\n\r\nfunction Main() {\r\n  return (\r\n    <div className=\"Main\">\r\n      <Demo />\r\n      <Dino />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Main;\r\n","import React from \"react\";\n\nimport Footer from \"./components/Footer\";\nimport Header from \"./components/Header\";\nimport Main from \"./components/Main\";\nimport \"./css/App.css\";\n\nfunction App() {\n  return (\n    <div className=\"MyBody\">\n      <Header />\n      <Main />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./css/index.css\";\nimport \"./css/mycss.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}